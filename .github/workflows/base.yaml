name: Base - Build, Test, Push

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'base/**'
  pull_request:
    paths:
    - 'base/**'

env:
  # How long to sleep before running the tests (gives the application time to start)
  GOSS_SLEEP: 30

# Detect which folders in project-root (which contain the containers) contain changes
jobs:
  # generate_matrix:
  #   name: Detect Changes
  #   runs-on: ubuntu-20.04
  #   outputs:
  #     matrix: "{\"path\": ${{ steps.generate_matrix.outputs.matrix }} }"
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Generate matrix
  #     id: generate_matrix
  #     uses: ReyahSolutions/matrix-git-generator@v1
  #     with:
  #       filters: |
  #         **

  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    outputs:
      containers: ${{ steps.filter.outputs.changed_files }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: shell
        filters: |
          changed:
          - 'base/**'
    - run: echo ${{ steps.filter.outputs.changed_files }}

  test:
    name: Test
    runs-on: ubuntu-20.04
    needs: changes
    steps:
    - run: echo ${{ needs.changes.outputs.containers }}

  # build:
  #   name: Build
  #   runs-on: ubuntu-20.04
  #   needs: changes
  #   if: ${{ needs.changes.outputs.containers != '[]' && needs.changes.outputs.containers != '' }}
  #   strategy:
  #     matrix:
  #       container: ${{ fromJSON(needs.changes.outputs.containers) }}
  #     fail-fast: false
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   # Define if tests and push should be run against which versions/platforms
  #   - name: Prepare
  #     id: prep
  #     run: |
  #       echo ${{ matrix.container }}
  #       echo ${{ matrix.container.changed }}
  #       echo ${{ matrix.container.changed_files }}

# VERSION=$(cat ${{ matrix.container }}/VERSION)
# echo ::set-output name=version::${VERSION}
# PLATFORM=$(cat ${{ matrix.container }}/PLATFORM)
# echo ::set-output name=platform::${PLATFORM}
# # Goss?
# if test -f "${{ matrix.container }}/goss.yaml"; then
#   echo ::set-output name=goss::true
# else
#   echo ::set-output name=goss::false
# fi
# # PR?
# if [ "${{github.event_name}}" == "pull_request" ]; then
#   echo ::set-output name=push::false
# else
#   echo ::set-output name=push::true
# fi

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v1
    #   with:
    #     platforms: all

    # - name: Login to GHCR
    #   if: github.event_name != 'pull_request'
    #   uses: docker/login-action@v1
    #   with:
    #     registry: ghcr.io
    #     username: ${{ secrets.GHCR_USERNAME }}
    #     password: ${{ secrets.GHCR_TOKEN }}

    #   # Install and configure Buildx
    # - name: Set up Docker Buildx
    #   id: buildx
    #   uses: docker/setup-buildx-action@v1
    #   with:
    #     install: true
    #     version: latest
    #     driver-opts: image=moby/buildkit:master

    #   # Make sure we can store buildx cache in-between builds
    # - name: Cache Docker layers
    #   uses: actions/cache@v2
    #   with:
    #     path: /tmp/.buildx-cache
    #     key: ${{ runner.os }}-buildx-${{ github.sha }}
    #     restore-keys: |
    #       ${{ runner.os }}-buildx-

    #   # Install the GOSS testing framework
    # - name: Set up goss/dgoss
    #   uses: e1himself/goss-installation-action@v1.0.3
    #   if: ${{ steps.prep.outputs.goss == 'true' }}
    #   with:
    #     version: 'v0.3.16'

    #   # Creates a local build to run tests on
    # - name: Build and Load local test-container
    #   if: ${{ steps.prep.outputs.goss == 'true' }}
    #   uses: docker/build-push-action@v2
    #   with:
    #     build-args: VERSION=${{ steps.prep.outputs.version }}
    #     context: .
    #     file: ${{ matrix.path }}/Dockerfile
    #     load: true
    #     tags: |
    #       ghcr.io/${{ github.repository_owner }}/${{ matrix.path }}:test
    #     cache-from: type=local,src=/tmp/.buildx-cache
    #     cache-to: type=local,dest=/tmp/.buildx-cache

    #   # Run GOSS tests if included with the container
    # - name: Run GOSS tests
    #   if: ${{ steps.prep.outputs.goss == 'true' }}
    #   env:
    #     GOSS_FILE: ${{ matrix.path }}/goss.yaml
    #   run: |
    #     dgoss run ghcr.io/${{ github.repository_owner }}/${{ matrix.path }}:test

    #   # Push if not a PR, otherwise just test the build process for all requested platforms
    # - name: Build and Push
    #   uses: docker/build-push-action@v2
    #   with:
    #     build-args: VERSION=${{ steps.prep.outputs.version }}
    #     context: .
    #     platforms: ${{ steps.prep.outputs.platform }}
    #     file: ${{ matrix.path }}/Dockerfile
    #     push: ${{ steps.prep.outputs.push }}
    #     tags: |
    #       ghcr.io/${{ github.repository_owner }}/${{ matrix.path }}:latest
    #       ghcr.io/${{ github.repository_owner }}/${{ matrix.path }}:v${{ steps.prep.outputs.version }}
    #     cache-from: type=local,src=/tmp/.buildx-cache
